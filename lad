#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - bashconfig/lad
# Started On        - Tue  9 Apr 14:48:44 BST 2019
# Last Change       - Thu 11 Apr 01:29:06 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-04-11"

XERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; exit 1; }
ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            LAD - LIST AND DESCRIBE ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            List and describe functions and aliases made available from the
		            bashconfig repository, found through the GitHub link below.

		SYNTAX:     lad [OPTS] [STRING]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --search|-s [E|F|A]:S   - Where S is the string for which to search. If
		                                      searching through the functions, prepend
		                                      'F:', or for aliases, use 'A:'; for either, -
		                                      use 'E:'.

		NOTE:       If a function or alias for which you're searching with the respective
		            flag, begins with E, F, or A, followed by a colon, note that this will
		            be ignored as an argument, so should not cause confusion.

		RULES:      In order for lad to correctly list functions and aliases, various rules
		            must be followed; these are listed below:

		              1. ' #: ', sans quotes, must be appended to alias lines.

		                 For example:

		                   alias do='echo "Some random stuff."' #: Print some text.

		              2. Alias setting MUST be single-line only.

		              3. ' #: ', sans quotes, must be appended to function declaration.

		                 For example:

		                   func_name(){ #: Print some text.
		                           echo "Some random stuff."
		                   }

		              4. The alias must be the first command on its line.

		                 Example of incorrect usage:

		                   [ -x /bin/thing ] && alias do="thing" #: Do thing.

		                 Example of correct usage:

		                   if [ -x /bin/thing ]; then
		                           alias do="thing" #: Do thing.
		                   fi

		              5. Aliases must be put into: \$HOME/.bash_aliases

		              6. Functions must be put into: \$HOME/.bash_functions

		FILES:      The following files are scanned:

		              \$HOME/.bash_functions
		              \$HOME/.bash_aliases

		LINK:       https://github.com/terminalforlife
	EOF
}

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--search|-s)
			shift; SEARCH="$1"
			if ! [[ "$SEARCH" =~ ^[AFE]{1}: ]]; then
				XERR "$LINENO" "Invalid search query. See 'lad --help' for information."
			fi

			;;
		*)
			XERR "$LINENO" "Incorrect argument(s) specified." ;;
	esac
	shift
done

[ "$DEBUGME" == "true" ] && set -x

FILE_BF="$HOME/.bash_functions"
FILE_BA="$HOME/.bash_aliases"


#------------------------------------------------------------------GATHER FUNCTIONS

if [ -f "$FILE_BF" ] && [ -r "$FILE_BF" ]; then
	[ -z "$SEARCH" ] && printf "FUNCTIONS ($FILE_BF)\n\n"

	while read; do
		if ! [ -z "$REPLY" ] && ! [[ "$REPLY" =~ ^\# ]]; then
			if [[ "$REPLY" =~ [a-Z0-9_-]+\(\)\{ ]]; then
				NAME="${REPLY%%\(\)\{*}"
				NAME="${NAME//\	/}"

				# A description of " #: TEXT" must be appended to
				# the function call line for each function. This
				# will NOT work otherwise.
				DESC="${REPLY#*\#\:}"

				# Only functions found 0-1 tabs in are counted.
				if ! [[ "$NAME" =~ \	{2,} ]]; then
					if [ "${SEARCH%%:*}" == "F" ] && [ "$NAME" == "${SEARCH#F:}" ]; then
						exit 0
					elif [ "${SEARCH%%:*}" == "F" ] && ! [ "$NAME" == "${SEARCH#F:}" ]; then
						exit 1
					else
						printf "  %s - %s\n" $NAME "${DESC#\ }"
					fi
				fi
			fi
		fi
	done < "$FILE_BF"
else
	XERR "$LINENO" "File '$FILE_BF' not found."
fi

#--------------------------------------------------------------------GATHER ALIASES

if [ -f "$FILE_BA" ] && [ -r "$FILE_BA" ]; then
	[ -z "$SEARCH" ] && printf "\nALIASES ($FILE_BA)\n\n"

	while read; do
		if ! [ -z "$REPLY" ] && ! [[ "$REPLY" =~ ^\# ]]; then
			if [[ "$REPLY" =~ alias\ [:\"\']{0,}[a-Z0-9_-]+[\'\"]{0,}\= ]]; then
				declare -a TEMP=(${REPLY%%\=*})

				#TODO - A cleaner system is preferable.
				# A description of " #: TEXT" must be appended to
				# the alias set line for each function. This will
				# NOT work otherwise, as with the functions.
				DESC="${REPLY#*\#\:}"

				if [ "${TEMP[0]}" == "alias" ]; then
					printf "  %s - %s\n" "${TEMP[1]//[\"\']}" "${DESC#\ }"

				fi
			fi
		fi
	done < "$FILE_BA"
else
	XERR "$LINENO" "File '$FILE_BA' not found."
fi
