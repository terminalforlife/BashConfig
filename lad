#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - bashconfig/lad
# Started On        - Tue  9 Apr 14:48:44 BST 2019
# Last Change       - Mon 13 May 00:06:08 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

_VERSION_="2019-05-13"
_PROJECT_="${0##*/}"

FAIL(){
	printf "[L%0.4d] ERROR: %s\n" "$2" "$3" 1>&2
	[ $1 -eq 1 ] && exit 1
}

USAGE(){
	while read -r; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${_PROJECT_^^} - LIST AND DESCRIBE ($_VERSION_)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            List and describe functions and aliases made available from the
		            bashconfig repository, found through the GitHub link below.

		SYNTAX:     $_PROJECT_ [OPTS] [STRING]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --debug|-D              - Enables the built-in bash debugging.
		            --search|-s [E|F|A]:S   - Where S is the string for which to search. If
		                                      searching through the functions, prepend
		                                      'F:', or for aliases, use 'A:'; for either, -
		                                      use 'E:'.
		            --exit-only|-e          - If using the search feature, omit the boolean
		                                      result, and instead rely on the exit status.
		                                      1 is false, 0 is true.
		            --only-funcs|-F         - Display only functions.
		            --only-aliases|-A       - Display only aliases.

		NOTE:       If a function or alias for which you're searching with the respective
		            flag, begins with E, F, or A, followed by a colon, note that this will
		            be ignored as an argument, so should not cause confusion.

		RULES:      In order for $_PROJECT_ to correctly list functions and aliases, various rules
		            must be followed; these are listed below:

		              1. ' #: ', sans quotes, must be appended to alias lines.

		                 For example:

		                   alias do='echo "Some random stuff."' #: Print some text.

		              2. Alias setting MUST be single-line only.

		              3. ' #: ', sans quotes, must be appended to function declaration.

		                 For example:

		                   func_name(){ #: Print some text.
		                           echo "Some random stuff."
		                   }

		              4. The alias must be the first command on its line.

		                 Example of incorrect usage:

		                   [ -x /bin/thing ] && alias do="thing" #: Do thing.

		                 Example of correct usage:

		                   if [ -x /bin/thing ]; then
		                           alias do="thing" #: Do thing.
		                   fi

		              5. Aliases must be put into: \$HOME/.bash_aliases

		              6. Functions must be put into: \$HOME/.bash_functions

		              7. Functions must use '(){', without spacing.

		FILES:      The following files are scanned:

		              \$HOME/.bash_functions
		              \$HOME/.bash_aliases

		LINK:       https://github.com/terminalforlife
	EOF
}

BOOLEAN="true"
NL="\n"

while [ "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--version|-v)
			printf "%s\n" "$_VERSION_"
			exit 0 ;;
		--debug|-D)
			DEBUGME="true" ;;
		--search|-s)
			shift; SEARCH="$1"
			if ! [[ "$SEARCH" =~ ^[AFE]{1}: ]]; then
				FAIL 1 "$LINENO" "Invalid search query. See '$_PROJECT_ --help' for information."
			fi ;;
		--exit-only|-e)
			BOOLEAN="false" ;;
		--only-funcs|-F)
			ONLY_FUNCS="true" ;;
		--only-aliases|-A)
			ONLY_ALIASES="true"; unset NL ;;
		*)
			FAIL 1 "$LINENO" "Incorrect argument(s) specified." ;;
	esac
	shift
done

if [ -s "$ONLY_FUNCS" -a -s "$ONLY_ALIASES" ]; then
	FAIL 1 "$LINENO" "Either '--only-funcs|-F' or '--only-aliases|-A' may used at one time."
elif [ "$BOOLEAN" == "false" -a -z "$SEARCH" ]; then
	FAIL 1 "$LINENO" "The '--exit-only' option strictly applies to the '--search|-s' flag."
fi

FILE_BF="$HOME/.bash_functions"
FILE_BA="$HOME/.bash_aliases"

[ "$DEBUGME" == "true" ] && set -x

PRINT(){ [ "$SEARCH" ] || printf "  %s - %s\n" "$@"; }
CHK_TEMP(){ [ "$1" == "$2" ] && A_FOUND="true" || return 1; }

#------------------------------------------------------------------GATHER FUNCTIONS


if [ "$ONLY_FUNCS" == "true" ] || [ -z "$ONLY_FUNCS" -a -z "$ONLY_ALIASES" ]; then
	if [ -f "$FILE_BF" ] && [ -r "$FILE_BF" ]; then
		[ -z "$SEARCH" ] && printf "FUNCTIONS ($FILE_BF)\n\n"

		while read; do
			if ! [ -z "$REPLY" ] && ! [[ "$REPLY" =~ ^\# ]]; then
				if [[ "$REPLY" =~ [a-Z0-9_-]+\(\)\{ ]]; then
					NAME="${REPLY%%\(\)\{*}"

					# A description of " #: TEXT" must be appended to
					# the function call line for each function. This
					# will NOT work otherwise.
					DESC="${REPLY#*\#\:}"

					#TODO - Temporary quick fix for strange
					#       issue since recent update. P()
					#       still shows up otherwise.
					#[ "$NAME" == "P" ] && continue

					# Only functions found 0-1 tabs in are counted.
					if [[ "$NAME" =~ ^\	{0,1}[a-Z_-] ]]; then
						NAME="${NAME//\	/}"
						if [[ "${SEARCH%%:*}" == [FE] ]]; then
							CHK_TEMP "$NAME" "${SEARCH#[FE]:}" || continue
						else
							PRINT "$NAME" "${DESC#\ }"
						fi
					fi
				fi
			fi
		done < "$FILE_BF"
	else
		FAIL 1 "$LINENO" "File '$FILE_BF' not found."
	fi
fi

[ "$F_FOUND" == "true" ] && { [ "$BOOLEAN" == "true" ] && printf "true\n"; exit 0; }

#--------------------------------------------------------------------GATHER ALIASES

if [ "$ONLY_ALIASES" == "true" ] || [ -z "$ONLY_FUNCS" -a -z "$ONLY_ALIASES" ]; then
	if [ -f "$FILE_BA" ] && [ -r "$FILE_BA" ]; then
		[ -z "$SEARCH" ] && printf "${NL}ALIASES ($FILE_BA)\n\n"

		while read; do
			if ! [ -z "$REPLY" ] && ! [[ "$REPLY" =~ ^\# ]]; then
				if [[ "$REPLY" =~ alias\ [:\"\']{0,}[a-Z0-9_-]+[\'\"]{0,}\= ]]; then
					declare -a TEMP=(${REPLY%%\=*})

					#TODO - A cleaner system is preferable.
					# A description of " #: TEXT" must be appended to
					# the alias set line for each function. This will
					# NOT work otherwise, as with the functions.
					DESC="${REPLY#*\#\:}"

					if [ "${TEMP[0]}" == "alias" ]; then
						if [[ "${SEARCH%%:*}" == [AE] ]]; then
							CHK_TEMP "${TEMP[1]//[\"\']}" "${SEARCH#[AE]:}" || continue
						else
							PRINT "${TEMP[1]//[\"\']}" "${DESC#\ }"
						fi

					fi
				fi
			fi
		done < "$FILE_BA"
	else
		FAIL 1 "$LINENO" "File '$FILE_BA' not found."
	fi
fi

#[ "$A_FOUND" == "true" ] && { [ "$BOOLEAN" == "true" ] && printf "true\n"; exit 0; }

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
