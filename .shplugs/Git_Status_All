#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - bashconfig/.shplugs/Git_Status_All
# Started On        - Sat 16 Sep 14:19:06 BST 2017
# Last Change       - Sat 16 Nov 15:43:36 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Example of assumed directory structure:
#
#   /home/ichy
#   └── GitHub
#       ├── mig
#       │   └── gedit-themes
#       │       ├── autumn.xml
#       │       └── zenburn.xml
#       └── terminalforlife
#           ├── Forks
#           │   └── bashone
#           │       ├── 1.sh
#           │       └── README.md
#           └── Personal
#               └── i3Config
#                   ├── config
#                   ├── get_packages
#                   ├── LICENSE
#                   ├── README.md
#                   └── update_links.sh
#
#----------------------------------------------------------------------------------

gitsa()(
	GH_NAME='terminalforlife'

	declare -a GI=()
	GI[0]='≎' # Clean.
	GI[1]='≍' # Uncommitted changes.
	GI[2]='≭' # Unstaged changes.
	GI[3]='≺' # New file(s).
	GI[4]='⊀' # Removed file(s).
	GI[5]='≔' # Initial commit.
	GI[6]='∾' # Branch is ahead.
	GI[7]='⮂' # Fix conflicts.
	GI[8]='!' # Unknown (ERROR).


	FIRST="true"
	for GROUP in "$HOME/GitHub/$GH_NAME/"*; {
		if [ -d "$GROUP" ]; then
			[ "$FIRST" == "true" ] || printf "\n" && unset FIRST

			printf "Listing git '%s' repositories:\n\n" "${GROUP##*/}"
			cd "$GROUP"

			for DIR in *; {
				if [ -d "$DIR" ]; then
					for REPO in *; {
						if [ -d "$REPO" ]; then

							cd "$REPO"

							[ -d '.git' ] || continue

							STATUS=`git status 2>&-`

							if [ "$BRANCH" == "true" ]; then
								# Get the current branch name.
								TOP=`git rev-parse --show-toplevel`
								IFS='/' read -a A < "$TOP/.git/HEAD"
								local GB="${A[${#A[@]}-1]}"
							fi

							# While loops in special order:
							while read -ra Z; do
								if [ "${Z[0]}${Z[1]}" == 'Initialcommit' ]; then
									printf -v DESC "\e[1;31m%s\e[0m  \e[2;37mBranch '%s' has no commits, yet." "${GI[5]}" "$GB"
									break
								fi
							done <<< "$STATUS"

							while read -ra Z; do
								if [ "${Z[0]}${Z[1]}${Z[2]}" == '(fixconflictsand' ]; then
									printf -v DESC "\e[1;31m%s\e[0m  \e[2;37mBranch '%s' has conflict(s)." "${GI[7]}" "$GB"
									break
								fi
							done <<< "$STATUS"

							while read -ra Z; do
								if [ "${Z[0]}${Z[1]}${Z[2]}" == 'nothingtocommit,' ]; then
									local TTL_COMS
									readarray TTL_COMS <<< "$(git --no-pager log --format='oneline')"
									printf -v DESC "\e[1;31m%s\e[0m  \e[2;37mBranch '%s' is %d commit(s) clean." "${GI[0]}" "$GB" "${#TTL_COMS[@]}"
									break
								fi
							done <<< "$STATUS"

							while read -ra Z; do
								if [ "${Z[0]}${Z[1]}${Z[3]}" == 'Yourbranchahead' ]; then
									printf -v DESC "\e[1;31m%s\e[0m  \e[2;37mBranch '%s' leads by %d commit(s)." "${GI[6]}" "$GB" "${Z[7]}"
									break
								fi
							done <<< "$STATUS"

							while read -ra Z; do
								if [ "${Z[0]}${Z[1]}" == 'Untrackedfiles:' ]; then
									#TODO: Sloppy method needs improving.
									local LINE NFTTL=0
									while read -a LINE; do
										[ "${LINE[0]}" == '??' ] && let NFTTL+=1
									done <<< "$(git status --short)"

									printf -v DESC "\e[1;31m%s\e[0m  \e[2;37mBranch '%s' has %d new file(s)." "${GI[3]}" "$GB" "$NFTTL"
									break
								fi
							done <<< "$STATUS"

							while read -ra Z; do
								if [ "${Z[0]}" == 'modified:' ]; then
									local TEMP
									read -a TEMP <<< `git diff --shortstat`
									printf -v DESC "\e[1;31m%s\e[0m  \e[2;37mBranch '%s' has %d modified file(s)." "${GI[2]}" "$GB" "${TEMP[0]}"
									break
								fi
							done <<< "$STATUS"

							while read -ra Z; do
								if [ "${Z[0]}${Z[1]}${Z[2]}${Z[3]}" == 'Changestobecommitted:' ]; then
									#TODO: Have a counter for this, too.
									printf -v DESC "\e[1;31m%s\e[0m  \e[2;37mBranch '%s' has changes to commit." "${GI[1]}" "$GB"
									break
								fi
							done <<< "$STATUS"
							# End of specially-ordered while loops.

							#printf "  \e[0m%10s %s \n" "'$REPO'" "$DESC"
							printf "%24s \e[1;31m%s\e[0m %s\n" "$REPO" "$DESC"

							cd ..
						fi
					}

					cd ..
				fi
			}

			cd ..
		fi
	}

	unset -f PARSER

	printf "\n"
)

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
