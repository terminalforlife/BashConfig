#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - bashconfig/.shplugs/Git_Status_All
# Started On        - Sat 16 Sep 14:19:06 BST 2017
# Last Change       - Fri  6 Apr 19:54:24 BST 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

gitsa(){
	ERR(){ printf "[L%0.4d] ERROR: %s\n" "$1" "$2" 1>&2; }

	if ! [ -x /usr/bin/git ]; then
		ERR "$LINENO" "Dependency '/usr/bin/git' not met."
		return 1
	elif ! [ $# -eq 0 ]; then
		ERR "$LINENO" "Arguments not required."
		return 1
	fi

	# Enter your own location where your repositories are stored. Each one is
	# assumed to be its own directory by the name of the repository itself.
	MY_GIT_STORAGE="$HOME/GitHub/terminalforlife/Personal"

	if ! [ -d "$MY_GIT_STORAGE" ]; then
		ERR "$LINENO" "Unable to locate: $MY_GIT_STORAGE"
		return 1
	fi

	CURRENT_DIRECTORY="$PWD"
	for DIR in $MY_GIT_STORAGE/* 'D+LqTAFĴ{!'; do
		#TODO - Remove that last empty space... somehow.
		if [ "$B" ] || [ "$C" ] || [ "$D" ] || [ "$E" ]; then
			[ "$DIR" == 'D+LqTAFĴ{!' ] && continue
			printf "\n"
		fi

		TITLE="false"
		unset B C D E

		[ -d "$DIR" ] || continue && cd "$DIR"

		while read -ra X; do
			case "${X[*]}" in
				#*nothing\ to\ commit,\ working\ directory\ clean*)
				#	A="true"
				#	[ "$TITLE" == "true" ] || TITLE="true" ;;
				Changes\ to\ be\ committed\:)
					B="true"
					[ "$TITLE" == "true" ] || TITLE="true" ;;
				Changes\ not\ staged\ for\ commit\:)
					C="true"
					[ "$TITLE" == "true" ] || TITLE="true" ;;
				*nothing\ added\ to\ commit\ but\ untracked*)
					D="true"
					[ "$TITLE" == "true" ] || TITLE="true" ;;
				Your\ branch\ is\ ahead\ of*)
					E="true"
					[ "$TITLE" == "true" ] || TITLE="true" ;;
				#Your\ branch\ is\ up-to-date\ with*)
				#	F="true"
				#	[ "$TITLE" == "true" ] || TITLE="true" ;;
			esac
		done <<< "$(/usr/bin/git status)"

		if [ "$TITLE" == "true" ]; then
			IFLET(){
				for LET in $@; { [ "$LET" ] && local DO="yes"; }
				[ "$DO" == "yes" ] && printf "REPO: ${DIR//*\/}\n"
			}

			# If either of these letters (as args) are true.
			IFLET B C D E F

			#[ "$A" ] && printf "  ⏵ Clean; nothing to commit.\n"
			[ "$B" ] && printf "  ⏵ Changes to be committed.\n"
			[ "$C" ] && printf "  ⏵ Changes yet to be staged for commit.\n"
			[ "$D" ] && printf "  ⏵ Untracked files present.\n"
			[ "$E" ] && printf "  ⏵ Commit(s) ready to be sent upstream.\n"
			#[ "$F" ] && printf "  ⏵ Current branch is up-to-date with origin.\n"
		fi

		cd ..
	done

	cd "$CURRENT_DIRECTORY"
}

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
