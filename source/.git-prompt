#!/usr/bin/env bash

#------------------------------------------------------------------------------
# Project Name      - BashConfig/source/.git-prompt
# Started On        - Sat 12 Dec 03:45:45 GMT 2020
# Last Change       - Sat 12 Dec 05:54:53 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Dependencies:
#
#   bash (>= 4.3-14)
#------------------------------------------------------------------------------

GIT_PROMPT_VERSION='2020-12-12'

# ANSI color escape sequences.
Red='\e[2;31m';     BRed='\e[1;31m';     Green='\e[2;32m';  BGreen='\e[1;32m'
Yellow='\e[2;33m';  BYellow='\e[1;33m';  Grey='\e[2;37m';   Reset='\e[0m'
Italic='\e[3m';     Blue='\e[2;34m';     BBlue='\e[1;34m';  BPink='\e[1;35m'
Pink='\e[2;35m';    Cyan='\e[2;36m';     BCyan='\e[1;36m'

GIT_PROMPT_BRANCH(){
	local Top=`git rev-parse --show-toplevel`
	read Line < "$Top"/.git/HEAD
	printf '%s' "${Line##*/}"

	unset Line
}

GIT_PROMPT_SIMPLE_STATE(){
	local Status=`git status -s`
	if [ -z "$Status" ]; then
		printf " $BGreenüóÄ$Reset"
	else
		printf " $BRedüóÅ$Reset"
	fi
}

GIT_PROMPT_LAST_COMMIT(){
	local String
	read String <<< "$(git --no-pager show --name-status --oneline HEAD^)"
	String=${String#*\ }

	if [ -n "$String" ]; then
		MaxCols=$((COLUMNS - 1)) # <-- Should prevent wrapping.
		printf "$Green\"%s\"$Reset" "${String:0:$MaxCols}"
	else
		printf "$BRedN/A$Reset"
	fi
}

GIT_PROMPT_SHOW(){
	if [ $1 -gt 0 ]; then
		local Exit="$BRedüó¥$Reset"
	else
		local Exit="$BGreenüó∏$Reset"
	fi

	local Basename=${PWD##*/}
	local Dirname=${PWD%/*}

	if [ "$Dirname/$Basename" == '/' ]; then
		printf -v CWD "$Italic$BGreen/$Reset"
	else
		printf -v CWD "$Grey%s/$Italic$BGreen%s$Reset" "$Dirname" "$Basename"
	fi

	if git rev-parse --is-inside-work-tree &> /dev/null; then
		local SimpleState=`GIT_PROMPT_SIMPLE_STATE`
		local Branch=`GIT_PROMPT_BRANCH`
		local Last=`GIT_PROMPT_LAST_COMMIT`
		local Hash=`git rev-parse HEAD 2> /dev/null`

		PS1="\[$BYellow\]ùîæ \[$Reset\] \[$Italic$BGreen\]$Branch\[$Reset\] "
		PS1+="$SimpleState   \[$Grey\]--\[$Reset\] $Last\n"
	else
		PS1=''
	fi

	PS1+="$Exit $CWD\n: "
}

PROMPT_COMMAND='GIT_PROMPT_SHOW $?'
